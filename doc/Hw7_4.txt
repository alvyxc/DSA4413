// Original Implementation using recursion
DFS(G)
  for each vertex u in G.V 
	u.color = WHITE 
	u.pi = NIL
  time = 0

  for each vertex u in G.V
	if u.color == WHITE 
		DFS-VISIT(G, u)


DFS-VISIT(G,u)
  time = time + 1  // white vertex u has just been discovered 
  u.d = time
  u.color = GRAY
  for each􏰁 v in G.Adj[u] //explore edge(u, v)
	if 􏰁v.color == WHITE 
		v, pi = u
		DFS-VISIT(G, v)
  u.color = BLACK
  time = time + 1 
  u.f = time


// Implementation using Stack. 
DFS(G)
  for each vertex u in G.V 
	u.color = WHITE 
	u.pi = NIL
  time = 0

  for each vertex u in G.V
	if u.color == WHITE 
		DFS-VISIT(G, u)


DFS-VISIT(G,u)

  Stack S // initialize stack to empty
  S.push(u)  

  while ! S.isEmpty()
	u' = S.pop()
        time = time + 1 // white vertex u has just been discovered  
	u'.d = time
        u'.color = GRAY
	for each v in G.Adj[u]   // explore edge(u, v)	
        	if v.color == WHITE
			v, pi = u'
			S.push(v)
  	u'.color = BLACK
  	time = time + 1 
  	u'.f = time